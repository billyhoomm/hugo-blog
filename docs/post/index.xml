<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on billyhu&#39;s blog</title>
    <link>https://billyhu.com/post/</link>
    <description>Recent content in Posts on billyhu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Dec 2019 10:46:01 +0800</lastBuildDate>
    
	<atom:link href="https://billyhu.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript中描述对象的方式：基于类和基于原型</title>
      <link>https://billyhu.com/post/js-way-to-describe-objects/</link>
      <pubDate>Mon, 09 Dec 2019 10:46:01 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-way-to-describe-objects/</guid>
      <description>自从ES6中引入了class关键字，基于类的编程方式就成为了JavaScript的官方编程范式，这也解决了之前的使用各种诡异的方式来模拟类的</description>
    </item>
    
    <item>
      <title>JavaScript对象的特征和属性</title>
      <link>https://billyhu.com/post/js-object-characteristics-and-properties/</link>
      <pubDate>Mon, 28 Oct 2019 23:22:01 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-object-characteristics-and-properties/</guid>
      <description>什么是对象？ 在《面向对象分析与设计》书中，作者Grady Booch替我们做了总结，他认为，从人类的认知角度来说，对象应该是下列事物之一： 一个</description>
    </item>
    
    <item>
      <title>使用hugo和github pages搭建个人博客</title>
      <link>https://billyhu.com/post/use-hugo-and-github-build-a-blog/</link>
      <pubDate>Wed, 02 Oct 2019 22:02:01 +0800</pubDate>
      
      <guid>https://billyhu.com/post/use-hugo-and-github-build-a-blog/</guid>
      <description>关于hugo Hugo是一个用Go语言编写的静态网站生成器，它使用起来非常简单，相对于Jekyll复杂的安装设置来说，Hugo仅需要一个二进制</description>
    </item>
    
    <item>
      <title>JavaScript代码中必须加分号的所有情况</title>
      <link>https://billyhu.com/post/js-codes-semicolon/</link>
      <pubDate>Sat, 30 Jun 2018 14:00:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-codes-semicolon/</guid>
      <description>前言 之前写JS每句都会加上分号（习惯了很久），但最近好像有点懒，觉得看分号越来越不顺眼，干脆都不写了，所以今天在写async/await函数</description>
    </item>
    
    <item>
      <title>highlight.js完美配合marked</title>
      <link>https://billyhu.com/post/highlight.js-marked/</link>
      <pubDate>Sat, 26 May 2018 23:14:20 +0800</pubDate>
      
      <guid>https://billyhu.com/post/highlight.js-marked/</guid>
      <description>前言：Using highlight.js with marked 这是我的自建博客系统使用Marked.js来parsemarkdown文件再结合highlight.js来让代码高亮的</description>
    </item>
    
    <item>
      <title>overflow与BFC</title>
      <link>https://billyhu.com/post/overflow-bfc/</link>
      <pubDate>Thu, 24 May 2018 11:26:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/overflow-bfc/</guid>
      <description>BFC（Block Formatting Context，块级格式化上下文） 是 CSS 渲染过程中进行布局的盒子，所有浮动子元素都在盒子内进行布局。 也就是说 BFC 内的浮动元素</description>
    </item>
    
    <item>
      <title>浏览器的Http请求重发机制</title>
      <link>https://billyhu.com/post/brower-http-request-reissue/</link>
      <pubDate>Thu, 26 Apr 2018 10:26:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/brower-http-request-reissue/</guid>
      <description>前言：近期由于业务需要写了一个逻辑，主要是给几万个用户群发消息，前端发送请求后，后台会加一个时间间隔分批发送，全部发送完毕后再回包。结果就出</description>
    </item>
    
    <item>
      <title>文件中转服务的应用</title>
      <link>https://billyhu.com/post/file-transfer-service/</link>
      <pubDate>Tue, 27 Mar 2018 12:26:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/file-transfer-service/</guid>
      <description>前段时间做微信公众号服务碰到的一个问题，写公司内部微信管理平台时调微信api获取的图片地址都是带防盗链的，在浏览器端一般都是显示一张水印： 原</description>
    </item>
    
    <item>
      <title>深入理解Stream和Buffer</title>
      <link>https://billyhu.com/post/learning-stream-and-buffer/</link>
      <pubDate>Sat, 09 Dec 2017 16:26:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/learning-stream-and-buffer/</guid>
      <description>Stream stream是Node.js提供的又一个仅在服务区端可用的模块，目的是支持“流”这种数据结构。 流是一种抽象的数据结构。想象水流，当在水管中</description>
    </item>
    
    <item>
      <title>NodeJS中的线程、异步和事件循环</title>
      <link>https://billyhu.com/post/nodejs-thread-asynchronous-and-eventloops/</link>
      <pubDate>Wed, 30 Aug 2017 15:41:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/nodejs-thread-asynchronous-and-eventloops/</guid>
      <description>单线程OR多线程 一些理解 我们写出来的js代码，是在单线程的环境中执行，但nodejs本身不是单线程的。如果我们在代码中执行了一个promis</description>
    </item>
    
    <item>
      <title>express-session和signedCookie</title>
      <link>https://billyhu.com/post/express-session-and-signed-cookie/</link>
      <pubDate>Mon, 12 Jun 2017 16:41:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/express-session-and-signed-cookie/</guid>
      <description>hi 这是一篇周总结 使用session进行身份认证以及signedCookie session运行在服务器端，当客户端第一次访问服务器时，可以将客</description>
    </item>
    
    <item>
      <title>基于Webpack的前端工程化</title>
      <link>https://billyhu.com/post/front-end-engineering-of-webpack/</link>
      <pubDate>Mon, 10 Apr 2017 11:23:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/front-end-engineering-of-webpack/</guid>
      <description>基于Webpack的前端工程化初探 webpack的重点配置介绍 出入口文件配置 1 2 3 4 5 6 7 8 9 module.exports = { entry:{ app:&amp;#39;./src/main</description>
    </item>
    
    <item>
      <title>Nginx反向代理Nodejs详细配置</title>
      <link>https://billyhu.com/post/nginx-reverse-proxy-nodejs/</link>
      <pubDate>Sat, 18 Feb 2017 21:57:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/nginx-reverse-proxy-nodejs/</guid>
      <description>前言 空余时间学习使用vue.js+webpack制作了一个简单的nodejs网站，web服务器使用express构建，而个人的云服务器是部署</description>
    </item>
    
    <item>
      <title>跨域方案CORS使用总结</title>
      <link>https://billyhu.com/post/cors-to-sum-up/</link>
      <pubDate>Tue, 22 Nov 2016 20:57:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/cors-to-sum-up/</guid>
      <description>前言 最近不管是在公司项目还是自已的个人项目中用到的跨域方案都不再是JSONP了，而是变成了CORS（Cross-origin resource sharing</description>
    </item>
    
    <item>
      <title>jsPlumb中文文档</title>
      <link>https://billyhu.com/post/jsplumb-doc/</link>
      <pubDate>Sun, 13 Nov 2016 20:57:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/jsplumb-doc/</guid>
      <description>前言 以下jsPlumb文档介绍基于jsPlumb2.1.7版本，这是一个开源的流程图或拓扑图绘制工具库，目前网上可用的中文翻译文档并不齐全，</description>
    </item>
    
    <item>
      <title>关于JS模块模式的写法和作用</title>
      <link>https://billyhu.com/post/js-module-mode/</link>
      <pubDate>Thu, 09 Jun 2016 23:17:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-module-mode/</guid>
      <description>前言 本来对于js中模块模式这个词还没有很清晰的定义，但在看一个小项目的时候发现了用模块模式定义工具函数的作用，而且已经被很多大公司使用的EC</description>
    </item>
    
    <item>
      <title>正则初探</title>
      <link>https://billyhu.com/post/learning-regular-expression/</link>
      <pubDate>Sun, 22 May 2016 22:42:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/learning-regular-expression/</guid>
      <description>正则学习 在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。工作中不管是处理特殊字符串还是批量处理一些东西时使用正则</description>
    </item>
    
    <item>
      <title>iframe之间的跨域和通信</title>
      <link>https://billyhu.com/post/iframe-cross-domain/</link>
      <pubDate>Mon, 04 Apr 2016 21:30:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/iframe-cross-domain/</guid>
      <description>iframe之间的跨域和通信 本周的合规二期开发接触到了很多iframe相关的通信，经验不是很足，iframe通信这些在之前接触较少，而主要用</description>
    </item>
    
    <item>
      <title>JS的函数定义方式以及对声明的提前</title>
      <link>https://billyhu.com/post/js-statement-in-advance/</link>
      <pubDate>Tue, 08 Mar 2016 23:20:32 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-statement-in-advance/</guid>
      <description>前言 由于javascript中的函数定义方式比较特殊，并且每种的特点都不相同，所以本文介绍一下JS几种函数定义方式和各自的优缺点，并且对JS</description>
    </item>
    
    <item>
      <title>js的链式调用分析</title>
      <link>https://billyhu.com/post/js-chained-call/</link>
      <pubDate>Sun, 17 Jan 2016 21:40:32 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-chained-call/</guid>
      <description>前言 在做一个组件化开发的案例时在主逻辑中用到了链式调用的方法，目的是为了让代码更简洁易读，减少代码量，但是对各个构造函数末尾的&amp;rdquo;</description>
    </item>
    
    <item>
      <title>JavaScript阻止事件冒泡</title>
      <link>https://billyhu.com/post/js-event-bubbling/</link>
      <pubDate>Fri, 01 Jan 2016 09:50:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-event-bubbling/</guid>
      <description>取消默认操作 w3c 的方法是 e.preventDefault()，IE 则是使用 e.returnValue = false; 在支持 addEventListener() 的浏览器中，也能通过调用时间对象的 preventDefault() 方法取消时间的默认</description>
    </item>
    
    <item>
      <title>关于Javascript闭包的总结</title>
      <link>https://billyhu.com/post/js-closure/</link>
      <pubDate>Sat, 31 Oct 2015 12:20:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-closure/</guid>
      <description>关于闭包这个词的解释 维基百科中对于闭包的经典解释： 在计算机科学中，闭包（Closure）是词法闭包（Lexical Closure）的简称，是</description>
    </item>
    
    <item>
      <title>CSS几种居中方法解释</title>
      <link>https://billyhu.com/post/css-centered-methods/</link>
      <pubDate>Wed, 21 Oct 2015 03:46:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/css-centered-methods/</guid>
      <description>1.水平居中 行级元素设置其父元素的text-align center，块级元素设置其本身的left 和 right margins为auto即可，下面主要介</description>
    </item>
    
    <item>
      <title>javascript中的this用法</title>
      <link>https://billyhu.com/post/js-this/</link>
      <pubDate>Fri, 09 Oct 2015 00:36:50 +0800</pubDate>
      
      <guid>https://billyhu.com/post/js-this/</guid>
      <description>前言 this是Javascript语言的一个关键字。 它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。比如， 1 2 3 function test(){ this.x = 1; } 随</description>
    </item>
    
  </channel>
</rss>